security:
<<<<<<< HEAD
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users_in_memory: { memory: null }
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      access_denied_handler: App\Security\AccessDeniedHandler

      lazy: true
      provider: app_user_provider
      form_login:
        login_path: app_auth
        check_path: app_auth_login
        username_parameter: _username
        password_parameter: _password
        csrf_token_id: authenticate
        csrf_parameter: _csrf_token
        enable_csrf: true
        success_handler: App\Security\LoginSuccessHandler

      logout:
        path: app_logout
        target: app_auth

  access_control:
    - { path: ^/auth, roles: PUBLIC_ACCESS }
    - { path: ^/auth/register, roles: PUBLIC_ACCESS }
    - { path: ^/auth/forgot-password, roles: PUBLIC_ACCESS }
    - { path: ^/auth/check-email, roles: PUBLIC_ACCESS }
    - { path: ^/auth/reset-password, roles: PUBLIC_ACCESS }
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/user, roles: ROLE_ADMIN }
    - { path: ^/reclamation/admin, roles: ROLE_ADMIN }
    - { path: ^/reclamation/stats, roles: ROLE_ADMIN }
    - {
        path: ^/(gym|events|shop|exercise|workout|reclamation),
        roles: ROLE_UTILISATEUR,
      }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: bcrypt
        cost: 6 # Lowest possible value for bcrypt
=======
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            access_denied_handler: App\Security\AccessDeniedHandler
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                success_handler: App\Security\LoginSuccessHandler

            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route


            
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/gym, roles: ROLE_USER }
        - { path: ^/events, roles: ROLE_USER }
        - { path: ^/shop, roles: ROLE_USER }
        - { path: ^/exercise, roles: ROLE_USER }
        - { path: ^/workout, roles: ROLE_USER }



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: bcrypt
                cost: 6 # Lowest possible value for bcrypt
>>>>>>> shop
