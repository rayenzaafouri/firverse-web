{% extends 'base.html.twig' %}

{% block title %}Shop{% endblock %}

{% block stylesheets %}
<style>
    .card-body { padding: 0.75rem; }
    .card-title { font-size: 1.25rem; }
    .card-text { font-size: 0.85rem; }
    .btn-success { background-color: #28a745; border-color: #28a745; }
    #searchResults {
        position: absolute;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 0.375rem;
        width: 100%;
        z-index: 1000;
        max-height: 200px;
        overflow-y: auto;
        display: none;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }
    #searchResults .list-group-item {
        border: none;
        border-bottom: 1px solid #dee2e6;
        padding: 0.5rem 1rem;
        cursor: pointer;
    }
    #searchResults .list-group-item:hover {
        background-color: #f1f1f1;
    }
    .product-img {
        height: 150px;
        object-fit: contain;
        padding: 0.5rem;
    }
    .discount-badge {
        top: 0.5rem;
        left: 0.5rem;
        font-size: 0.8rem;
    }
    
    /* New hover effects */
    .dropdown-toggle:hover {
        background-color: #f8f9fa;
    }
    .dropdown-item:hover {
        background-color: #f8f9fa;
        color: #0d6efd;
    }
    .btn-group .btn-outline-secondary:hover {
        background-color: #f8f9fa;
    }
    .btn-group .dropdown-menu {
        border-radius: 0.5rem;
    }
    .btn-sm {
        transition: all 0.2s ease;
    }
    .btn-sm:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .wishlist-toggle:hover {
        transform: scale(1.1);
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.product-card');
    const categoryFilterItems = document.querySelectorAll('.category-filter');
    const sortItems = document.querySelectorAll('.sort-option');
    const container = document.querySelector('.row.g-4');

    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');

    let currentCategory = '';
    let currentSort = '';

    function showToast(message, x, y) {
        const toast = document.createElement('div');
        toast.textContent = message;
        toast.style.position = 'absolute';
        toast.style.left = `${x}px`;
        toast.style.top = `${y - 40}px`;
        toast.style.backgroundColor = '#333';
        toast.style.color = '#fff';
        toast.style.padding = '10px 20px';
        toast.style.borderRadius = '5px';
        toast.style.fontSize = '14px';
        toast.style.zIndex = 9999;
        toast.style.boxShadow = '0 2px 8px rgba(0,0,0,0.2)';
        toast.style.transition = 'opacity 0.3s';
        toast.style.opacity = '1';
        document.body.appendChild(toast);
        setTimeout(() => toast.style.opacity = '0', 500);
        setTimeout(() => toast.remove(), 2000);
    }

    function applyFilters() {
        const visibleCards = [];

        cards.forEach(card => {
            const matchesCategory = currentCategory === '' || card.dataset.category === currentCategory;
            const matchesSearch = searchInput.value === '' || 
                                card.dataset.name.toLowerCase().includes(searchInput.value.toLowerCase());
            
            card.classList.toggle('d-none', !(matchesCategory && matchesSearch));
            if (matchesCategory && matchesSearch) visibleCards.push(card);
        });

        visibleCards.sort((a, b) => {
            const priceA = parseFloat(a.dataset.price);
            const priceB = parseFloat(b.dataset.price);
            return currentSort === 'asc' ? priceA - priceB : currentSort === 'desc' ? priceB - priceA : 0;
        });

        visibleCards.forEach(card => container.appendChild(card));
    }

    categoryFilterItems.forEach(item => {
        item.addEventListener('click', e => {
            currentCategory = item.dataset.category;
            applyFilters();
        });
    });

    sortItems.forEach(item => {
        item.addEventListener('click', () => {
            currentSort = item.dataset.sort;
            applyFilters();
        });
    });

    searchInput.addEventListener('input', () => {
        const query = searchInput.value.toLowerCase();
        searchResults.innerHTML = '';
        if (query.length === 0) {
            searchResults.style.display = 'none';
            applyFilters();
            return;
        }

        let matches = 0;
        cards.forEach(card => {
            const name = card.dataset.name.toLowerCase();
            if (name.includes(query)) {
                const item = document.createElement('div');
                item.className = 'list-group-item';
                item.textContent = card.dataset.name;
                item.onclick = () => {
                    searchInput.value = card.dataset.name;
                    searchResults.style.display = 'none';
                    currentCategory = '';
                    currentSort = '';
                    applyFilters();
                    // Scroll to the product
                    card.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    // Add highlight effect
                    card.classList.add('highlight');
                    setTimeout(() => card.classList.remove('highlight'), 2000);
                };
                searchResults.appendChild(item);
                matches++;
            }
        });

        searchResults.style.display = matches > 0 ? 'block' : 'none';
    });

    // Close search results when clicking outside
    document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
            searchResults.style.display = 'none';
        }
    });

    // Wishlist
    document.querySelectorAll('.wishlist-toggle').forEach(icon => {
        icon.addEventListener('click', async e => {
            e.preventDefault();
            const productId = icon.dataset.productId;
            try {
                const res = await fetch(`/wishlist/wishlist/toggle/${productId}`);
                const data = await res.json();
                if (data.status === 'added') {
                    icon.classList.remove('far');
                    icon.classList.add('fas', 'text-danger');
                } else {
                    icon.classList.remove('fas', 'text-danger');
                    icon.classList.add('far', 'text-danger');
                }
                showToast(data.status === 'added' ? '‚úÖ Added to wishlist' : '‚ùå Removed from wishlist', e.pageX, e.pageY);
            } catch {
                showToast('‚ùå Error updating wishlist', e.pageX, e.pageY);
            }
        });
    });

    // Add to cart popup
    document.querySelectorAll('.cart-form').forEach(form => {
        form.addEventListener('submit', async e => {
            e.preventDefault();
            const btn = form.querySelector('button');
            const rect = btn.getBoundingClientRect();
            const x = rect.left + window.scrollX + rect.width / 2;
            const y = rect.top + window.scrollY;

            try {
                const res = await fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form)
                });
                if (res.ok) {
                    showToast('üõí Product added to cart', x, y);
                } else {
                    showToast('‚ùå Failed to add to cart', x, y);
                }
            } catch {
                showToast('‚ùå Error while adding to cart', x, y);
            }
        });
    });
});
</script>
{% endblock %}

{% block body %}
{% include 'navbar.html.twig' %}

<div class="container py-5">
    <div class="row justify-content-center mb-4">
        <div class="col-md-4 position-relative">
            <div class="input-group">
                <input id="searchInput" type="text" class="form-control" placeholder="Search products...">
                <button id="searchButton" class="btn btn-primary" type="button">Search</button>
            </div>
            <div id="searchResults" class="list-group position-absolute mt-1"></div>
        </div>
    </div>

    <div class="d-flex justify-content-end mb-4">
  <div class="btn-group">
    <button class="btn btn-outline-info dropdown-toggle d-inline-flex align-items-center" data-bs-toggle="dropdown">
      <i class="material-symbols-outlined me-1 align-middle" style="font-size:1.2em;">filter_alt</i>
      <span>Filter</span>
    </button>
    <ul class="dropdown-menu dropdown-menu-end">
      <li><a class="dropdown-item category-filter" data-category="">All Categories</a></li>
      {% for category in categories %}
      <li>
        <a class="dropdown-item category-filter" data-category="{{ category.name }}">
          {{ category.name }}
        </a>
      </li>
      {% endfor %}
    </ul>
  </div>

  <div class="btn-group ms-2">
    <button class="btn btn-outline-info dropdown-toggle d-inline-flex align-items-center" data-bs-toggle="dropdown">
      <i class="material-symbols-outlined me-1 align-middle" style="font-size:1.2em;">sort</i>
      <span>Sort</span>
    </button>
    <ul class="dropdown-menu dropdown-menu-end">
      <li><a class="dropdown-item sort-option" data-sort="asc">Price: Low to High</a></li>
      <li><a class="dropdown-item sort-option" data-sort="desc">Price: High to Low</a></li>
    </ul>
  </div>
</div>

    <div class="row g-4">
        {% for product in products %}
            {% set discount = 0 %}
            {% set now = "now"|date('U') %}
            {% for d in product.productDiscounts %}
                {% if discount == 0 and d.validFrom|date('U') <= now and d.validUntil|date('U') >= now %}
                    {% set discount = d.discountPercentage %}
                {% endif %}
            {% endfor %}
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 product-card" data-name="{{ product.name }}" data-category="{{ product.category.name }}" data-price="{{ product.price }}">
                <div class="card h-100 shadow-sm position-relative">
                    {% set isWishlisted = false %}
                    {% for w in app.user.getWishlists %}
                        {% if w.product.id == product.id %}
                            {% set isWishlisted = true %}
                        {% endif %}
                    {% endfor %}
                    <i class="wishlist-toggle fa-heart {{ isWishlisted ? 'fas text-danger' : 'far text-danger' }}"
                       data-product-id="{{ product.id }}"
                       style="position: absolute; top: 10px; right: 10px; font-size: 1.7rem; cursor: pointer; transition: transform 0.2s ease;"></i>

                    {% if discount > 0 %}
                        <span class="badge bg-danger position-absolute discount-badge">{{ discount }}% Discount</span>
                    {% endif %}

                    <img src="{{ product.imageUrl }}" class="card-img-top product-img" alt="{{ product.name }}">

                    <div class="card-body d-flex flex-column p-3">
                        <h5 class="card-title">{{ product.name }}</h5>
                        <p class="card-text text-muted small">
                            {{ product.description|length > 40 ? product.description|slice(0, 150) ~ '...' : product.description }}
                        </p>

                        <div class="mt-auto">
                            {% if discount > 0 %}
                                <p class="mb-1"><small class="text-muted"><del>{{ product.price|number_format(2) }} TND</del></small></p>
                                <p class="text-danger fw-bold">{{ (product.price * (1 - discount / 100))|number_format(2) }} TND</p>
                            {% else %}
                                <p class="text-dark fw-bold">{{ product.price|number_format(2) }} TND</p>
                            {% endif %}

                            <div class="d-flex gap-5">
                                <form method="POST" action="{{ path('cart_add', {'id': product.id}) }}" class="d-inline">
                                    <input type="hidden" name="_token" value="{{ csrf_token('add' ~ product.id) }}">
                                    <button type="submit" class="btn btn-success btn-sm flex-grow-1">
                                        <i class="bi bi-cart-plus me-1"></i> Add to cart
                                    </button>
                                </form>

                                <a href="{{ path('productdetail', {'id': product.id}) }}" 
                                   class="btn btn-primary btn-sm flex-grow-1">
                                    <i class="bi bi-eye me-1"></i> View
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>
{% endblock %}