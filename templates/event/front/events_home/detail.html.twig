{# templates/event/front/events_home/detail.html.twig #}

{% extends 'base.html.twig' %}

{% block title %}Event Details{% endblock %}

{% block body %}
{% include 'navbar.html.twig' %}
 <!-- Fl√®che de retour √† la page d'accueil en haut √† gauche -->
    <div style="text-align: left; margin-left: 20px; margin-top : 20px;">
        <a href="{{ path('events_home') }}" class="btn btn-primary" style="margin-bottom: 20px;">‚Üê Back to Events</a>
    </div>

<div class="container event-detail-container" style="text-align: center;">

    <h1 class="event-title">{{ event.name }}</h1>
    
    {# <img src="{{ asset('uploads/photos/' ~ event.photo) }}" alt="{{ event.name }}" class="event-image"/> #}
<img src="{{ asset('uploads/events/' ~ event.photo) }}" 
     alt="{{ event.name }}" 
     class="event-image"
     onerror="this.onerror=null;this.src='{{ asset('images/default-event.jpg') }}'">

    <div class="event-details">
        <p><strong>Date:</strong> üóìÔ∏è {{ event.date|date('F j, Y') }} at {{ event.time }}</p>
 <p><strong>Location:</strong> üìç 
            <a href="#" id="location-link">{{ event.location }}</a>
        </p>
        <p><strong>Description:</strong> üìù {{ event.description }}</p>
        <p><strong>Price:</strong> üí∞ {{ event.price }}  D.T</p>
    </div>

     <!-- Changez l'√©l√©ment <a> en un bouton <button> avec l'id 'reserve-button' -->
    <button id="reserve-button" class="btn btn-primary">
        Reserve this event
    </button>

</div>
<div id="geo-message" class="geo-message" style="display:none;">
    <i class="fa fa-map-marker-alt" aria-hidden="true"></i>
    <span>Nous sommes ici, bienvenue !</span>
</div>

{% endblock %}

{% block javascripts %}
{{ parent() }}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/qrcode@1.4.4/build/qrcode.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const reserveButton = document.getElementById('reserve-button');

    reserveButton.addEventListener('click', function() {
        // Affichage du premier popup de succ√®s
        Swal.fire({
            title: 'Participation enregistr√©e ! ‚úÖ',
            text: "Merci pour votre r√©servation.",
            icon: 'success',
            showCancelButton: false, // Pas de bouton Annuler
            confirmButtonText: 'Continuer ‚û°Ô∏è',
            confirmButtonColor: '#3085d6'
        }).then((result) => {
            if (result.isConfirmed) {
                // Affichage du deuxi√®me popup avec un formulaire de paiement
                Swal.fire({
                    title: '√âtape 2 : Payer pour finaliser votre participation üí≥',
                    text: 'Veuillez remplir vos informations de paiement pour finaliser votre r√©servation.',
                    icon: 'question',
                    html: `
                        <form id="payment-form">
                            <label for="card-type">Choisissez le type de carte:</label><br>
                            <select id="card-type" class="swal2-input">
                                <option value="Visa">Visa</option>
                                <option value="MasterCard">MasterCard</option>
                                <option value="AmericanExpress">American Express</option>
                            </select><br>

                            <label for="card-number">Num√©ro de carte:</label><br>
                            <input type="text" id="card-number" class="swal2-input" placeholder="Num√©ro de carte" required><br>

                            <label for="expiration-date">Date d'expiration:</label><br>
                            <input type="text" id="expiration-date" class="swal2-input" placeholder="MM/AA" required><br>

                            <label for="cvv">Code de s√©curit√© (CVV):</label><br>
                            <input type="text" id="cvv" class="swal2-input" placeholder="CVV" required><br>
                        </form>
                    `,
                    showCancelButton: true,
                    cancelButtonText: 'Retour',
                    confirmButtonText: 'Confirmer le paiement',
                    confirmButtonColor: '#28a745',
                    preConfirm: () => {
                        const cardNumber = document.getElementById('card-number').value;
                        const expirationDate = document.getElementById('expiration-date').value;
                        const cvv = document.getElementById('cvv').value;
                        const cardType = document.getElementById('card-type').value;

                        // Validation des champs
                        if (!cardNumber || !expirationDate || !cvv) {
                            Swal.showValidationMessage('Veuillez remplir tous les champs.');
                            return false; // Arr√™ter le processus si les informations sont incompl√®tes
                        }

                        if (!/^\d{16}$/.test(cardNumber)) {
                            Swal.showValidationMessage('Le num√©ro de carte doit comporter 16 chiffres.');
                            return false;
                        }

                        if (!/^\d{2}\/\d{2}$/.test(expirationDate)) {
                            Swal.showValidationMessage('La date d\'expiration doit √™tre au format MM/AA.');
                            return false;
                        }

                        // V√©rification de la date d'expiration (doit √™tre dans le futur)
                        const currentDate = new Date();
                        const [month, year] = expirationDate.split('/');
                        const expiration = new Date(`20${year}`, month - 1);

                        if (expiration <= currentDate) {
                            Swal.showValidationMessage('La date d\'expiration doit √™tre dans le futur.');
                            return false;
                        }

                        if (!/^\d{3}$/.test(cvv)) {
                            Swal.showValidationMessage('Le CVV doit comporter 3 chiffres.');
                            return false;
                        }

                        // Simuler le processus de paiement
                        return {
                            cardType: cardType,
                            cardNumber: cardNumber,
                            expirationDate: expirationDate,
                            cvv: cvv
                        };
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Processus de paiement termin√© avec succ√®s
                        Swal.fire({
                            title: 'Paiement effectu√© ! üéâ',
                            text: 'Merci pour votre paiement. Votre participation est maintenant finalis√©e.',
                            icon: 'success',
                            confirmButtonText: 'Terminer',
                            confirmButtonColor: '#28a745',
                            showCancelButton: true,
                            cancelButtonText: 'Retour',
                            // Ajout des options apr√®s finalisation
                            html: `
                                <button id="edit-participation" class="swal2-confirm swal2-styled">Modifier vos informations</button>
                                <button id="cancel-participation" class="swal2-cancel swal2-styled">Annuler la participation</button>
                            `
                        }).then((finalResult) => {
                            if (finalResult.isConfirmed) {
                                // Logique pour modifier les informations de participation
                                Swal.fire({
                                    title: 'Modification des informations',
                                    text: 'Vous pouvez maintenant modifier vos informations.',
                                    icon: 'info',
                                    confirmButtonText: 'Continuer',
                                    confirmButtonColor: '#3085d6'
                                });
                            } else if (finalResult.dismiss === Swal.DismissReason.cancel) {
                                // Logique pour annuler la participation
                                Swal.fire({
                                    title: 'Participation annul√©e',
                                    text: 'Votre participation a √©t√© annul√©e.',
                                    icon: 'info',
                                    confirmButtonText: 'Retour √† la page d\'√©v√©nement',
                                    confirmButtonColor: '#17a2b8'
                                });
                            }
                        });
                    } else {
                        // Si l'utilisateur annule le paiement
                        Swal.fire({
                            title: 'Paiement annul√©',
                            text: 'Votre participation n\'est pas finalis√©e.',
                            icon: 'info',
                            confirmButtonText: 'Retour √† la page d\'√©v√©nement',
                            confirmButtonColor: '#17a2b8'
                        });
                    }
                });
            }
        });
    });
});

    document.addEventListener('DOMContentLoaded', function() {
        const locationLink = document.getElementById('location-link');
        const eventLocation = "{{ event.location }}"; // Adresse de l'√©v√©nement

        locationLink.addEventListener('click', function(event) {
            event.preventDefault();

            // Utilisez l'API Geocoding pour obtenir les coordonn√©es de l'adresse
            const apiKey = 'AIzaSyCc-Wlcr47oT5EDZW7DJA5CLLNXCGxfKs0'; // Remplacez par votre cl√© API Google
            const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(eventLocation)}&key=${apiKey}`;

            fetch(geocodeUrl)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "OK") {
                        // R√©cup√©rer la latitude et la longitude
                        const lat = data.results[0].geometry.location.lat;
                        const lng = data.results[0].geometry.location.lng;

                        // Ouvrir Google Maps avec les coordonn√©es
                          // Cr√©er l'URL de Google Maps avec l'option "marcher"
                    const googleMapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}&travelmode=walking`;

                    // Ouvrir Google Maps avec l'option de marche
                    window.open(googleMapsUrl, '_blank');
                     // Afficher le message de g√©olocalisation
                            const geoMessage = document.getElementById('geo-message');
                            geoMessage.style.display = 'block';
                            setTimeout(() => {
                                geoMessage.style.display = 'none';
                            }, 5000); // Masquer apr√®s 5 secondes
                    } else if (data.status === "ZERO_RESULTS") {
                        alert("Aucune adresse trouv√©e pour cette localisation.");
                    } else if (data.status === "OVER_QUERY_LIMIT") {
                        alert("Limite de requ√™tes d√©pass√©e. Veuillez r√©essayer plus tard.");
                    } else if (data.status === "REQUEST_DENIED") {
                        alert("Acc√®s refus√© √† l'API. V√©rifiez votre cl√© API.");
                    } else if (data.status === "INVALID_REQUEST") {
                        alert("Requ√™te invalide. V√©rifiez l'adresse fournie.");
                    } else {
                        alert("Adresse introuvable !");
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert("Une erreur est survenue.");
                });
        });
    });
</script>
{% endblock %}
{% block stylesheets %}
{{ parent() }}
<style>
  /* Style pour le message de g√©olocalisation */
#geo-message {
    background-color: #f8d7da;
    color: #721c24;
    padding: 10px 20px;
    border-radius: 5px;
    margin-top: 20px;
    font-size: 1.2em;
    display: none; /* Initialement cach√© */
    text-align: center;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

#geo-message i {
    color: red;
    margin-right: 10px;
    font-size: 1.5em;
}


        /* Customize for mobile responsiveness */
        @media (max-width: 768px) {
            #geo-message {
                font-size: 1em;
            }
        }
    /* Modern design for event detail page */
    .event-detail-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 30px;
        background-color: #f9f9f9;
        border-radius: 8px;
        box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
    }

    /* Back button */
    .back-button {
        margin-bottom: 20px;
        font-size: 1.2em;
        text-decoration: none;
        padding: 10px 20px;
        border-radius: 5px;
        color: white;
        background-color: #007bff;
        transition: background-color 0.3s ease;
    }

    .back-button:hover {
        background-color: #0056b3;
    }

    /* Event title */
    .event-title {
        font-size: 2em;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
    }

    /* Event image */
    .event-image {
        width: 100%;
        height: auto;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    /* Event details */
    .event-details {
        text-align: left;
        font-size: 1.2em;
        color: #444;
    }

    /* Reserve button */
    .reserve-button {
        display: inline-block;
        padding: 12px 20px;
        background-color: #28a745;
        color: white;
        border-radius: 5px;
        text-decoration: none;
        font-size: 1.1em;
        margin-top: 20px;
        transition: background-color 0.3s ease;
    }

    .reserve-button:hover {
        background-color: #218838;
    }

    /* Mobile responsive design */
    @media (max-width: 768px) {
        .event-detail-container {
            padding: 20px;
        }

        .event-title {
            font-size: 1.6em;
        }

        .event-details {
            font-size: 1.1em;
        }

        .reserve-button {
            font-size: 1em;
        }
    }
</style>
{% endblock %}
